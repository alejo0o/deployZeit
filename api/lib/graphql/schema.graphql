#Definicion de tipos
type Pelicula {
  peliculasid: ID!
  claid: ID!
  nombre: String!
  fechadelanzamiento: String!
  duracion: Int!
  sinopsis: String!
  trailer: String!
  portada: String!
}

type Persona {
  perid: ID!
  paiid: ID!
  pernombre: String!
  perapellido: String!
  perfechanacim: String!
  perlugarnacim: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: String
  password: String!
  remember_token: String
}

type Noticia {
  notid: ID!
  peliculasid: ID!
  nottexto: String!
  notfecha: String!
  nottitulo: String!
  notimagen: String!
}

type Critica {
  criid: ID!
  peliculasid: ID!
  id: ID!
  critexto: String!
  crifecha: String!
  crivalor: Float!
}

type CriticaporValor {
  promedio: Float!
  peliculasid: ID!
  nombre: String!
  sinopsis: String!
  fechadelanzamiento: String!
  duracion: Int!
  portada: String!
  clanombre: String!
}

type CriticasporPelicula {
  crifecha: String!
  email: String!
  critexto: String!
  crivalor: Float!
  criid: ID!
}

type AnimesporEstreno {
  peliculasid: String!
  nombre: String!
  fechadelanzamiento: String!
  duracion: Int!
  sinopsis: String!
  portada: String!
}

type CriticasPeliculaUsuario {
  criid: ID!
  peliculasid: ID!
  id: ID!
  critexto: String!
  crifecha: String!
  crivalor: Float!
}

type EstrenosDirector {
  peliculasid: ID!
  nombre: String!
  fechadelanzamiento: String!
  duracion: Int!
  sinopsis: String!
  trailer: String!
  portada: String!
  pernombre: String!
  perapellido: String!
}

type PeliculaDirector {
  peliculasid: String!
  nombre: String!
  fechadelanzamiento: String!
  duracion: Int!
  sinopsis: String!
  trailer: String!
  portada: String!
  pernombre: String!
  perapellido: String!
}

type Usuario {
  id: ID!
  nickname: String!
  name: String!
  picture: String!
  email: String!
  sub: String!
  email_verified_at: String!
  remember_token: String!
}

#Tipos compuestos
type info {
  count: Int
  pages: Int
  next: String
  prev: String
}

type ObtenerCriticaporValor {
  info: info
  results: [CriticaporValor]!
}

type NoticiasFecha {
  info: info
  results: [Noticia]!
}

type ObtenerCriticasporPelicula {
  info: info
  results: [CriticasporPelicula]!
}

type ObtenerPeliculasEstreno {
  info: info
  results: [Pelicula]!
}

type ObtenerAnimesEstreno {
  info: info
  results: [AnimesporEstreno]!
}

type ObtenerEstrenosDirector {
  info: info
  results: [EstrenosDirector]!
}

type ObtenerBusquedasPorNoticias {
  info: info
  results: [Noticia]!
}

type ObtenerBusquedasPorPeliculas {
  info: info
  results: [Pelicula]!
}

#Definicion de Inputs Create
input PeliculaInput {
  claid: ID!
  nombre: String!
  fechadelanzamiento: String!
  duracion: Int!
  sinopsis: String!
  trailer: String!
  portada: String!
}

input PersonaInput {
  paiid: ID!
  pernombre: String!
  perapellido: String!
  perfechanacim: String!
  perlugarnacim: String!
}
input CriticaInput {
  peliculasid: ID!
  id: ID!
  critexto: String!
  crifecha: String!
  crivalor: Float!
}

input NoticiaInput {
  peliculasid: String!
  nottexto: String!
  notfecha: String!
  nottitulo: String!
  notimagen: String!
}

input UsuarioInput {
  nickname: String!
  name: String!
  picture: String!
  email: String!
  sub: String!
  email_verified_at: String
  remember_token: String
}

#Definicion de Inputs Edit
input PeliculaEditInput {
  claid: ID
  nombre: String
  fechadelanzamiento: String
  duracion: Int
  sinopsis: String
  trailer: String
  portada: String
}

input NoticiaEditInput {
  peliculasid: String
  nottexto: String
  notfecha: String
  nottitulo: String
  notimagen: String
}

input PersonaEditInput {
  paiid: ID
  pernombre: String
  perapellido: String
  perfechanacim: String
  perlugarnacim: String
}

input CriticaEditInput {
  peliculasid: ID
  id: ID
  critexto: String
  crifecha: String
  crivalor: Float
}

input UsuarioEditInput {
  nickname: String
  name: String
  picture: String
  email: String
  sub: String
  email_verified_at: String
  remember_token: String
}

#Operaciones
#Queries
type Query {
  #Devuelve todas las peliculas
  getPeliculas(page: Int): [Pelicula]
  #Devuelve una pelicula por su ID
  getPelicula(id: ID!): Pelicula

  #Devuelve todos los usuarios
  getUsers: [User]
  #Devuelve un usuario por su ID
  getUser(id: ID!): User

  #Devuelve todas las noticias
  getNoticias(page: Int): [Noticia]
  #Devuelve una noticia por su ID
  getNoticia(id: ID!): Noticia

  #Devuelve todas las personas
  getPersonas(page: Int): [Persona]
  #Devuelve una persona por su ID
  getPersona(id: ID!): Persona

  #Devuelve todas las criticas
  getCriticas(page: Int): [Critica]
  #Devuelve una critica por su ID
  getCritica(id: ID!): Critica

  #Devuelve todas las peliculas ordenadas por estreno
  getPeliculasporEstreno(page: Int!): ObtenerPeliculasEstreno
  #Devuelve las criticas ordenadas por valor de las peliculas asociadas
  getCriticasValor(page: Int!): ObtenerCriticaporValor
  #Devuelve todos los animes por estreno
  getAnimesporEstreno(page: Int!): ObtenerAnimesEstreno
  #Devuelve las criticas de los usuarios a las pelicula
  getCriticasporPelicula(page: Int!, id: ID!): ObtenerCriticasporPelicula
  #Devuelve las noticias ordenadas por fecha
  getNoticiasFecha(page: Int!): NoticiasFecha
  #Devuelve una critica por ID de usuario y de pelicula
  getCriticasUsuarioPelicula(
    page: Int!
    idMovie: ID!
    idUser: ID!
  ): CriticasPeliculaUsuario
  #Devuelve la informacion de una pelicula con su critica promedio
  getCriticasPromedioPelicula(page: Int!, id: ID!): CriticaporValor
  #Devuelve la pelicula con el director asociado
  getEstrenosDirector(page: Int!): ObtenerEstrenosDirector
  #Devuelve la informacion de una pelicula con su director
  getPeliculaDirector(id: ID!): PeliculaDirector
  #Devuelve un usuario segun su ID
  getUsuarioporID(id: ID!): Usuario
  #Devuelve noticia dependiendo de la palabra buscada
  getBuscarNoticia(page:Int!, word:String!):ObtenerBusquedasPorNoticias
  #Devuelve pelicula dependiendo de la palabra buscada
  getBuscarPelicula(page:Int!, word:String!):ObtenerBusquedasPorPeliculas
}
type Mutation {
  #Crea una nueva película
  createPelicula(input: PeliculaInput): Pelicula
  #Edita una película por su ID
  editPelicula(id: ID!, input: PeliculaEditInput): Pelicula
  #Elimina una película por su ID
  deletePelicula(id: ID!): String

  #Crea una nueva noticia
  createNoticia(input: NoticiaInput): Noticia
  #Edita una noticia por su ID
  editNoticia(id: ID!, input: NoticiaEditInput): Noticia
  #Elimina una Noticia por su ID
  deleteNoticia(id: ID!): String

  #Crea una nueva persona
  createPersona(input: PersonaInput): Persona
  #Edita una persona por su ID
  editPersona(id: ID!, input: PersonaEditInput): Persona
  #Elimina una persona por su ID
  deletePersona(id: ID!): String

  #Crea una nueva critica
  createCritica(input: CriticaInput): Critica
  #Edita una critica por su ID
  editCritica(id: ID!, input: CriticaEditInput): Critica
  #Elimina una Critica por su ID
  deleteCritica(id: ID!): String

  #Crea un nuevo usuario
  createUsuario(input: UsuarioInput!): Usuario
  #Edita un usuario existente
  editUsuario(id: ID!, input: UsuarioEditInput): Usuario
  #Elimina un usuario existente
  deleteUsuario(id: ID!): String
}
